AWSTemplateFormatVersion: "2010-09-09"
Description: "(SO0041) - The AWS CloudFormation template China for deployment of the %%SOLUTION_NAME%%. Version %%VERSION%%"
Parameters:
    AuthingThumbPrint:
        Type: String
        Description: "Authing CA Thumbprint. If you use Authing as OpenID provider, this value need not to be changed."
        Default: "48504e974c0dac5b5cd476c8202274b24c8c7172"

    AuthingAppName:
        Type: String
        Description: "Atuhing Application Name. Example: iotsimulation"

    AuthingAppUrl:
        Type: String
        Description: "Atuhing Application URL. Example: https://iotsimulation.authing.cn/oauth/oidc . Please note there is no '/ character at the end of  AuthingAppURL string"

    AuthingAppOidc:
        Type: String
        Description: "Atuhing Application URL. Example: iotsimulation.authing.cn/oauth/oidc (Without https://)."

    AuthingAppId:
        Type: String
        Description: "Atuhing OIDC App ID. Example: 5e9420f3b16cc8e2a51c1868 "

    AuthingAppSecret:
        Type: String
        Description: "Atuhing OIDC App Secret. Example: a2d5eba65b1b614a50db1ade61f50e4b"


    AuthingRSAsignature:
        Type: String
        Description: "Authing RSA signature Example: { \"n\": \"zTAIwLfWzymVYGK5oywDJnqrq8pbMIQAQVYQEtGCYiDct8nknbtvqHg3N31O3n-vhOOIZE26Ybg3dnlN__I5UDjLmSY_cl_Nusvxs3XZFzwpCuSyLzirZ3MT43HLP8HFV3iCeCgN3mNwDO3xJcnqXKzMmLSgNOmSxLdThKXh1a4_TC5gtbT-qmeO1S0yyDD5HNKvgAsRUl6BFXKY3LS-3o2gT9uWwyeX_PeTXtbSebU4Tya1UwMuzlDxvT3kbHRv7zDuVhG5ypBiEXnO04AGeUUAUd5PnuwQum8v1mMCmelcw0oKoMcwTuImCTIhWbPTg_blI8EVFOtvRimAOm8l7Q\", \"e\": \"AQAB\",\"use\": \"sig\", \"alg\": \"RS256\", \"kid\": \"jjtRhZbXxUmh5ZTCOsD0YpOrM0AyQdoC8xsyfhjLSQ0\",\"kty\": \"RSA\"}"


    MapxToken:
        Type: String
        Description: "Mapx Token value. Example: pk.eyJ1IjoiY2h1bmh1YXYiLCJhIjoiY2s2Oxxxxxxxxxxx"




Metadata:
    AWS::CloudFormation::Interface:
        ParameterGroups:
            - Label:
                  Default: "Administator Configuration"
              Parameters:
                #   - AdministratorName
                #   - AdministratorEmail
                  - AuthingThumbPrint
                  - AuthingAppUrl
                  - AuthingAppOidc
                  - AuthingAppId
                  - IdentityPoolName
                  - AuthingAppName
                  #- AuthingAppRedirectUrl
                  - AuthingAppSecret
                  - AuthingRSAsignature
                  - MapxToken


Mappings:
    Send:
        AnonymousUsage:
            Data: "No"
    SourceCode:
        General:
            S3Bucket: "%%BUCKET_NAME%%"
            KeyPrefix: "%%SOLUTION_NAME%%/%%VERSION%%"
        App:
            ShortName: "iotsimulator"
            FullName: "IoT Device Simulator"

Resources:
    # Permissions & Policies [start]

    IotDeviceSimEngineTaskExecutionRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: "Allow"
                      Principal:
                          Service:
                              - "ecs-tasks.amazonaws.com"
                      Action:
                          - "sts:AssumeRole"
            Path: "/"
            ManagedPolicyArns:
                - "arn:aws-cn:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"

    IotDeviceSimApiLambdaExecRole:
        Type: "AWS::IAM::Role"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    - id: W28
                      reason: "naming reviewed"
        Properties:
            RoleName:
                !Join ["-", ["iot-device-sim-apig-role", Ref: "AWS::Region"]]
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: "Allow"
                      Principal:
                          Service:
                              - "apigateway.amazonaws.com"
                      Action:
                          - "sts:AssumeRole"
            Path: "/"

    IotDeviceSimApiLambdaExecPolicy:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            Description: "IoT Device Simulator policy for the simulator api to invoke Lambda microservices."
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: "Allow"
                      Action:
                          - "lambda:InvokeFunction"
                      Resource:
                          - !GetAtt IotDeviceSimAdminService.Arn
                          - !GetAtt IotDeviceSimProfileService.Arn
                          - !GetAtt IotDeviceSimDeviceService.Arn
                          - !GetAtt IotDeviceSimMetricsService.Arn
                          - !GetAtt OpenIDTokenService.Arn

            Roles:
                - Ref: "IotDeviceSimApiLambdaExecRole"

    IotDeviceSimResourceHelperRole:
        Type: "AWS::IAM::Role"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    - id: W11
                      reason: "role reviewed with least priviledge access"
                    - id: F38
                      reason: "Need to allow cognito resource *"
                    - id: F3
                      reason: "allow * action on its permissions policy"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: "Allow"
                      Principal:
                          Service:
                              - "lambda.amazonaws.com"
                      Action:
                          - "sts:AssumeRole"
            Path: "/"
            Policies:
                - PolicyName: "IotDeviceSimResourceHelperPolicy"
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Effect: "Allow"
                            Action:
                                - "logs:CreateLogGroup"
                                - "logs:CreateLogStream"
                                - "logs:PutLogEvents"
                            Resource:
                                - !Join [
                                      "",
                                      [
                                          "arn:aws-cn:logs:",
                                          Ref: "AWS::Region",
                                          ":",
                                          Ref: "AWS::AccountId",
                                          ":log-group:/aws/lambda/iot-device-sim-helper:*",
                                      ],
                                  ]
                          - Effect: "Allow"
                            Action:
                                - "dynamodb:PutItem"
                            Resource:
                                - !Join [
                                      "",
                                      [
                                          "arn:aws-cn:dynamodb:",
                                          Ref: "AWS::Region",
                                          ":",
                                          Ref: "AWS::AccountId",
                                          ":table/*"
                                      ],
                                  ]
                                - !Join [
                                      "",
                                      [
                                          "arn:aws-cn:dynamodb:",
                                          Ref: "AWS::Region",
                                          ":",
                                          Ref: "AWS::AccountId",
                                          ":table/*",

                                      ],
                                  ]
                          - Effect: "Allow"
                            Action:
                                - "cognito-idp:CreateUserPool"
                                - "cognito-idp:AddCustomAttributes"
                                - "cognito-idp:CreateUserPoolClient"
                                - "cognito-idp:AdminCreateUser"
                                - "cognito-idp:CreateGroup"
                                - "cognito-idp:AdminAddUserToGroup"
                            Resource:
                                - "*"
                          - Effect: "Allow"
                            Action:
                                - "s3:GetObject"
                                - "s3:PutBucketPolicy"
                            Resource:
                                - "arn:aws-cn:s3:::*"
                          - Effect: "Allow"
                            Action:
                                - "s3:PutObject"
                                - "s3:PutBucketPolicy"
                            Resource:
                                - !Join [
                                      "/",
                                      [!GetAtt IotSimWebsiteBucket.Arn, "*"],
                                  ]
                                - !Join [
                                      "/",
                                      [!GetAtt IotSimDataBucket.Arn, "*"],
                                  ]
                          - Effect: "Allow"
                            Action:
                                - "iot:describeEndpoint"
                            Resource:
                                - "*"
                          - Effect: "Allow"
                            Action:
                                - "iam:CreateOpenIDConnectProvider"
                                - "cognito-identity:*"
                                - "iam:PassRole"
                            Resource:
                                - "*"

    IotDeviceSimProfileRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: "Allow"
                      Principal:
                          Service:
                              - "lambda.amazonaws.com"
                      Action:
                          - "sts:AssumeRole"
            Path: "/"

    IotDeviceSimProfilePolicy:
        Type: "AWS::IAM::ManagedPolicy"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    - id: W13
                      reason: "Policy has been scoped down"
        Properties:
            Description: "IoT Device Simulator policy for the profile microservice Lambda function."
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: "Allow"
                      Action:
                          - "logs:CreateLogGroup"
                          - "logs:CreateLogStream"
                          - "logs:PutLogEvents"
                      Resource:
                          !Join [
                              "",
                              [
                                  "arn:aws-cn:logs:",
                                  Ref: "AWS::Region",
                                  ":",
                                  Ref: "AWS::AccountId",
                                  ":log-group:/aws/lambda/",
                                  !Ref IotDeviceSimProfileService,
                                  ":*",
                              ],
                          ]
                    - Effect: "Allow"
                      Action:
                          - "dynamodb:GetItem"
                          - "dynamodb:Query"
                          - "dynamodb:Scan"
                      Resource:
                          - !Join [
                                "",
                                [
                                    "arn:aws-cn:dynamodb:",
                                    Ref: "AWS::Region",
                                    ":",
                                    Ref: "AWS::AccountId",
                                    ":table/",
                                    Ref: SettingsTable,
                                ],
                            ]
                    #[Note: Remove cognito userpool]
                    # - Effect: "Allow"
                    #   Action:
                    #       - "cognito-idp:AdminGetUser"
                    #       - "cognito-idp:AdminListGroupsForUser"
                    #   Resource:
                    #       !Join [
                    #           "",
                    #           [
                    #               "arn:aws:cognito-idp:",
                    #               Ref: "AWS::Region",
                    #               ":",
                    #               Ref: "AWS::AccountId",
                    #               ":userpool/",
                    #               !Ref IotDeviceSimUserPool,
                    #           ],
                    #       ]
            Roles:
                - Ref: "IotDeviceSimProfileRole"

    IotDeviceSimOpenIDTokenRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: "Allow"
                      Principal:
                          Service:
                              - "lambda.amazonaws.com"
                      Action:
                          - "sts:AssumeRole"
            Path: "/"

    IotDeviceSimOpenIdTokenPolicy:
        Type: "AWS::IAM::ManagedPolicy"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    - id: W13
                      reason: "Policy has been scoped down"
        Properties:
            Description: "IoT Device Simulator policy for the openidToken microservice Lambda function."
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: "Allow"
                      Action:
                          - "logs:CreateLogGroup"
                          - "logs:CreateLogStream"
                          - "logs:PutLogEvents"
                      Resource:
                          !Join [
                              "",
                              [
                                  "arn:aws-cn:logs:",
                                  Ref: "AWS::Region",
                                  ":",
                                  Ref: "AWS::AccountId",
                                  ":log-group:/aws/lambda/",
                                  !Ref OpenIDTokenService,
                                  ":*",
                              ],
                          ]

            Roles:
                - Ref: "IotDeviceSimOpenIDTokenRole"


    IotDeviceSimAdminRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: "Allow"
                      Principal:
                          Service:
                              - "lambda.amazonaws.com"
                      Action:
                          - "sts:AssumeRole"
            Path: "/"

    IotDeviceSimAdminPolicy:
        Type: "AWS::IAM::ManagedPolicy"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    - id: W13
                      reason: "Policy has been scoped down"
        Properties:
            Description: "IoT Device Simulator policy for the admin microservice Lambda function."
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: "Allow"
                      Action:
                          - "logs:CreateLogGroup"
                          - "logs:CreateLogStream"
                          - "logs:PutLogEvents"
                      Resource:
                          !Join [
                              "",
                              [
                                  "arn:aws-cn:logs:",
                                  Ref: "AWS::Region",
                                  ":",
                                  Ref: "AWS::AccountId",
                                  ":log-group:/aws/lambda/",
                                  Ref: IotDeviceSimAdminService,
                                  ":*",
                              ],
                          ]
                    - Effect: "Allow"
                      Action:
                          - "dynamodb:BatchGetItem"
                          - "dynamodb:BatchWriteItem"
                          - "dynamodb:DeleteItem"
                          - "dynamodb:GetItem"
                          - "dynamodb:PutItem"
                          - "dynamodb:Query"
                          - "dynamodb:Scan"
                          - "dynamodb:UpdateItem"
                      Resource:
                          - !Join [
                                "",
                                [
                                    "arn:aws-cn:dynamodb:",
                                    Ref: "AWS::Region",
                                    ":",
                                    Ref: "AWS::AccountId",
                                    ":table/",
                                    Ref: SettingsTable,
                                ],
                            ]
                    #[Note] remove cognito user pool
                    # - Effect: "Allow"
                    #   Action:
                    #       - "cognito-idp:AdminGetUser"
                    #       - "cognito-idp:AdminListGroupsForUser"
                    #       - "cognito-idp:AdminEnableUser"
                    #       - "cognito-idp:AdminDisableUser"
                    #       - "cognito-idp:AdminCreateUser"
                    #       - "cognito-idp:AdminDeleteUser"
                    #       - "cognito-idp:AdminAddUserToGroup"
                    #       - "cognito-idp:ListUsers"
                    #       - "cognito-idp:ListGroups"
                    #   Resource:
                    #       !Join [
                    #           "",
                    #           [
                    #               "arn:aws:cognito-idp:",
                    #               Ref: "AWS::Region",
                    #               ":",
                    #               Ref: "AWS::AccountId",
                    #               ":userpool/",
                    #               !Ref IotDeviceSimUserPool,
                    #           ],
                    #       ]

            Roles:
                - Ref: "IotDeviceSimAdminRole"

    IotDeviceSimDeviceRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: "Allow"
                      Principal:
                          Service:
                              - "lambda.amazonaws.com"
                      Action:
                          - "sts:AssumeRole"
            Path: "/"

    IotDeviceSimDevicePolicy:
        Type: "AWS::IAM::ManagedPolicy"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    - id: W13
                      reason: "Policy has been scoped down"
        Properties:
            Description: "IoT Device Simulator policy for the device microservice Lambda function."
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: "Allow"
                      Action:
                          - "logs:CreateLogGroup"
                          - "logs:CreateLogStream"
                          - "logs:PutLogEvents"
                      Resource:
                          !Join [
                              "",
                              [
                                  "arn:aws-cn:logs:",
                                  Ref: "AWS::Region",
                                  ":",
                                  Ref: "AWS::AccountId",
                                  ":log-group:/aws/lambda/",
                                  Ref: IotDeviceSimDeviceService,
                                  ":*",
                              ],
                          ]
                    - Effect: "Allow"
                      Action:
                          - "dynamodb:GetItem"
                          - "dynamodb:Query"
                          - "dynamodb:Scan"
                      Resource:
                          - !Join [
                                "",
                                [
                                    "arn:aws-cn:dynamodb:",
                                    Ref: "AWS::Region",
                                    ":",
                                    Ref: "AWS::AccountId",
                                    ":table/",
                                    Ref: SettingsTable,
                                ],
                            ]
                    - Effect: "Allow"
                      Action:
                          - "dynamodb:BatchGetItem"
                          - "dynamodb:BatchWriteItem"
                          - "dynamodb:DeleteItem"
                          - "dynamodb:GetItem"
                          - "dynamodb:PutItem"
                          - "dynamodb:Query"
                          - "dynamodb:Scan"
                          - "dynamodb:UpdateItem"
                      Resource:
                          - !Join [
                                "",
                                [
                                    "arn:aws-cn:dynamodb:",
                                    Ref: "AWS::Region",
                                    ":",
                                    Ref: "AWS::AccountId",
                                    ":table/",
                                    Ref: DeviceWidgetsTable,
                                ],
                            ]
                          - !Join [
                                "",
                                [
                                    "arn:aws-cn:dynamodb:",
                                    Ref: "AWS::Region",
                                    ":",
                                    Ref: "AWS::AccountId",
                                    ":table/",
                                    Ref: DeviceWidgetsTable,
                                    "/index/userId-category-index",
                                ],
                            ]
                          - !Join [
                                "",
                                [
                                    "arn:aws-cn:dynamodb:",
                                    Ref: "AWS::Region",
                                    ":",
                                    Ref: "AWS::AccountId",
                                    ":table/",
                                    Ref: DeviceTypesTable,
                                ],
                            ]
                    # - Effect: "Allow"
                    #   Action:
                    #       - "cognito-idp:AdminGetUser"
                    #       - "cognito-idp:AdminListGroupsForUser"
                    #   Resource:
                    #       !Join [
                    #           "",
                    #           [
                    #               "arn:aws-cn:cognito-idp:",
                    #               Ref: "AWS::Region",
                    #               ":",
                    #               Ref: "AWS::AccountId",
                    #               ":userpool/",
                    #               !Ref IotDeviceSimUserPool,
                    #           ],
                    #       ]
                    - Effect: "Allow"
                      Action:
                          - "sqs:sendMessage"
                      Resource:
                          - !GetAtt IotDeviceSimQueue.Arn
            Roles:
                - Ref: "IotDeviceSimDeviceRole"

    IotDeviceSimMetricsRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: "Allow"
                      Principal:
                          Service:
                              - "lambda.amazonaws.com"
                      Action:
                          - "sts:AssumeRole"
            Path: "/"

    IotDeviceSimMetricsPolicy:
        Type: "AWS::IAM::ManagedPolicy"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    - id: W13
                      reason: "Policy has been scoped down"
        Properties:
            Description: "IoT Device Simulator policy for the metrics microservice Lambda function."
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: "Allow"
                      Action:
                          - "logs:CreateLogGroup"
                          - "logs:CreateLogStream"
                          - "logs:PutLogEvents"
                      Resource:
                          !Join [
                              "",
                              [
                                  "arn:aws-cn:logs:",
                                  Ref: "AWS::Region",
                                  ":",
                                  Ref: "AWS::AccountId",
                                  ":log-group:/aws/lambda/",
                                  Ref: IotDeviceSimMetricsService,
                                  ":*",
                              ],
                          ]
                    - Effect: "Allow"
                      Action:
                          - "dynamodb:GetItem"
                          - "dynamodb:Query"
                          - "dynamodb:Scan"
                      Resource:
                          - !Join [
                                "",
                                [
                                    "arn:aws-cn:dynamodb:",
                                    Ref: "AWS::Region",
                                    ":",
                                    Ref: "AWS::AccountId",
                                    ":table/",
                                    Ref: SettingsTable,
                                ],
                            ]
                    - Effect: "Allow"
                      Action:
                          - "dynamodb:BatchGetItem"
                          - "dynamodb:BatchWriteItem"
                          - "dynamodb:DeleteItem"
                          - "dynamodb:GetItem"
                          - "dynamodb:PutItem"
                          - "dynamodb:Query"
                          - "dynamodb:Scan"
                          - "dynamodb:UpdateItem"
                      Resource:
                          - !Join [
                                "",
                                [
                                    "arn:aws-cn:dynamodb:",
                                    Ref: "AWS::Region",
                                    ":",
                                    Ref: "AWS::AccountId",
                                    ":table/",
                                    Ref: MetricsTable,
                                ],
                            ]
                    #[Note] Remove cognito user pool
                    # - Effect: "Allow"
                    #   Action:
                    #       - "cognito-idp:AdminGetUser"
                    #       - "cognito-idp:AdminListGroupsForUser"
                    #   Resource:
                    #       !Join [
                    #           "",
                    #           [
                    #               "arn:aws:cognito-idp:",
                    #               Ref: "AWS::Region",
                    #               ":",
                    #               Ref: "AWS::AccountId",
                    #               ":userpool/",
                    #               !Ref IotDeviceSimUserPool,
                    #           ],
                    #       ]
            Roles:
                - Ref: "IotDeviceSimMetricsRole"

    IotDeviceSimEngineTaskRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: "Allow"
                      Principal:
                          Service:
                              - "ecs-tasks.amazonaws.com"
                      Action:
                          - "sts:AssumeRole"
            Path: "/"

    IotDeviceSimEngineTaskPolicy:
        Type: "AWS::IAM::ManagedPolicy"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    - id: W13
                      reason: "Policy has been scoped down"
        Properties:
            Description: "IoT Device Simulator engine policy to allow ECS tasks to call AWS services on your behalf."
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: "Allow"
                      Action:
                          - "sqs:DeleteMessage"
                          - "sqs:GetQueueUrl"
                          - "sqs:ChangeMessageVisibility"
                          - "sqs:ListDeadLetterSourceQueues"
                          - "sqs:DeleteMessageBatch"
                          - "sqs:SendMessageBatch"
                          - "sqs:PurgeQueue"
                          - "sqs:ReceiveMessage"
                          - "sqs:SendMessage"
                          - "sqs:ListQueueTags"
                      Resource:
                          - !GetAtt IotDeviceSimQueue.Arn
                    - Effect: "Allow"
                      Action:
                          - "dynamodb:BatchGetItem"
                          - "dynamodb:BatchWriteItem"
                          - "dynamodb:DeleteItem"
                          - "dynamodb:GetItem"
                          - "dynamodb:PutItem"
                          - "dynamodb:Query"
                          - "dynamodb:Scan"
                          - "dynamodb:UpdateItem"
                      Resource:
                          - !Join [
                                "",
                                [
                                    "arn:aws-cn:dynamodb:",
                                    Ref: "AWS::Region",
                                    ":",
                                    Ref: "AWS::AccountId",
                                    ":table/",
                                    Ref: MetricsTable,
                                ],
                            ]
                          - !Join [
                                "",
                                [
                                    "arn:aws-cn:dynamodb:",
                                    Ref: "AWS::Region",
                                    ":",
                                    Ref: "AWS::AccountId",
                                    ":table/",
                                    Ref: DeviceWidgetsTable,
                                ],
                            ]
                          - !Join [
                                "",
                                [
                                    "arn:aws-cn:dynamodb:",
                                    Ref: "AWS::Region",
                                    ":",
                                    Ref: "AWS::AccountId",
                                    ":table/",
                                    Ref: DeviceWidgetsTable,
                                    "/index/userId-category-index",
                                ],
                            ]
                          - !Join [
                                "",
                                [
                                    "arn:aws-cn:dynamodb:",
                                    Ref: "AWS::Region",
                                    ":",
                                    Ref: "AWS::AccountId",
                                    ":table/",
                                    Ref: DeviceTypesTable,
                                ],
                            ]
                          - !Join [
                                "",
                                [
                                    "arn:aws-cn:dynamodb:",
                                    Ref: "AWS::Region",
                                    ":",
                                    Ref: "AWS::AccountId",
                                    ":table/",
                                    Ref: SettingsTable,
                                ],
                            ]
                    - Effect: "Allow"
                      Action:
                          - "s3:GetObject"
                          - "s3:PutObject"
                      Resource:
                          - !Join ["/", [!GetAtt IotSimDataBucket.Arn, "*"]]
                    - Effect: "Allow"
                      Action:
                          - "iot:publish"
                          - "iot:describeEndpoint"
                      Resource:
                          - "*"

            Roles:
                - Ref: "IotDeviceSimEngineTaskRole"

    IotDeviceSimPrincipalPolicy:
        Type: "AWS::IoT::Policy"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    - id: W39
                      reason: "policy is scoped down"
        DeletionPolicy: Retain
        Properties:
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: "Allow"
                      Action:
                          - "iot:Connect"
                      Resource:
                          - "*"
                    - Effect: "Allow"
                      Action:
                          - "iot:Subscribe"
                      Resource:
                          - "*"
                    - Effect: "Allow"
                      Action:
                          - "iot:Receive"
                      Resource:
                          - "*"
    #[Note] Maybe this auth role need to be removed


    # Permissions & Policies [end]

    # API [start]

    IotDeviceSimApi:
        Type: AWS::ApiGateway::RestApi
        Properties:
            Parameters:
                endpointConfigurationTypes: REGIONAL
            Body:
                swagger: "2.0"
                info:
                    version: "2017-02-24T15:19:00Z"
                    title:
                        Ref: AWS::StackName
                basePath: "/prod"
                schemes:
                    - "https"
                paths:
                    "/admin/groups":
                        options:
                            consumes:
                                - "application/json"
                            produces:
                                - "application/json"
                            responses:
                                "200":
                                    description: "200 response"
                                    schema:
                                        $ref: "#/definitions/Empty"
                                    headers:
                                        Access-Control-Allow-Origin:
                                            type: "string"
                                        Access-Control-Allow-Methods:
                                            type: "string"
                                        Access-Control-Allow-Headers:
                                            type: "string"
                            x-amazon-apigateway-integration:
                                responses:
                                    default:
                                        statusCode: "200"
                                        responseParameters:
                                            method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                                            method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                                            method.response.header.Access-Control-Allow-Origin: "'*'"
                                requestTemplates:
                                    application/json: '{"statusCode": 200}'
                                passthroughBehavior: "when_no_match"
                                type: "mock"
                        x-amazon-apigateway-any-method:
                            produces:
                                - "application/json"
                            responses:
                                "200":
                                    description: "200 response"
                                    schema:
                                        $ref: "#/definitions/Empty"
                            security:
                                - iot-sim-authorizer: []
                            x-amazon-apigateway-integration:
                                responses:
                                    default:
                                        statusCode: "200"
                                uri:
                                    Fn::Sub: "arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IotDeviceSimAdminService.Arn}/invocations"
                                passthroughBehavior: "when_no_match"
                                httpMethod: "POST"
                                contentHandling: "CONVERT_TO_TEXT"
                                type: "aws_proxy"
                                credentials: !GetAtt IotDeviceSimApiLambdaExecRole.Arn
                    "/admin/groups/{group_id}":
                        options:
                            consumes:
                                - "application/json"
                            produces:
                                - "application/json"
                            responses:
                                "200":
                                    description: "200 response"
                                    schema:
                                        $ref: "#/definitions/Empty"
                                    headers:
                                        Access-Control-Allow-Origin:
                                            type: "string"
                                        Access-Control-Allow-Methods:
                                            type: "string"
                                        Access-Control-Allow-Headers:
                                            type: "string"
                            x-amazon-apigateway-integration:
                                responses:
                                    default:
                                        statusCode: "200"
                                        responseParameters:
                                            method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                                            method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                                            method.response.header.Access-Control-Allow-Origin: "'*'"
                                requestTemplates:
                                    application/json: '{"statusCode": 200}'
                                passthroughBehavior: "when_no_match"
                                type: "mock"
                        x-amazon-apigateway-any-method:
                            produces:
                                - "application/json"
                            parameters:
                                - name: "group_id"
                                  in: "path"
                                  required: true
                                  type: "string"
                            responses:
                                "200":
                                    description: "200 response"
                                    schema:
                                        $ref: "#/definitions/Empty"
                            security:
                                - iot-sim-authorizer: []
                            x-amazon-apigateway-integration:
                                responses:
                                    default:
                                        statusCode: "200"
                                uri:
                                    Fn::Sub: "arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IotDeviceSimAdminService.Arn}/invocations"
                                passthroughBehavior: "when_no_match"
                                httpMethod: "POST"
                                contentHandling: "CONVERT_TO_TEXT"
                                type: "aws_proxy"
                                credentials: !GetAtt IotDeviceSimApiLambdaExecRole.Arn
                    "/admin/invitations":
                        options:
                            consumes:
                                - "application/json"
                            produces:
                                - "application/json"
                            responses:
                                "200":
                                    description: "200 response"
                                    schema:
                                        $ref: "#/definitions/Empty"
                                    headers:
                                        Access-Control-Allow-Origin:
                                            type: "string"
                                        Access-Control-Allow-Methods:
                                            type: "string"
                                        Access-Control-Allow-Headers:
                                            type: "string"
                            x-amazon-apigateway-integration:
                                responses:
                                    default:
                                        statusCode: "200"
                                        responseParameters:
                                            method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                                            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                                            method.response.header.Access-Control-Allow-Origin: "'*'"
                                requestTemplates:
                                    application/json: '{"statusCode": 200}'
                                passthroughBehavior: "when_no_match"
                                type: "mock"
                        x-amazon-apigateway-any-method:
                            produces:
                                - "application/json"
                            responses:
                                "200":
                                    description: "200 response"
                                    schema:
                                        $ref: "#/definitions/Empty"
                            security:
                                - iot-sim-authorizer: []
                            x-amazon-apigateway-integration:
                                responses:
                                    default:
                                        statusCode: "200"
                                uri:
                                    Fn::Sub: "arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IotDeviceSimAdminService.Arn}/invocations"
                                passthroughBehavior: "when_no_match"
                                httpMethod: "POST"
                                contentHandling: "CONVERT_TO_TEXT"
                                type: "aws_proxy"
                                credentials: !GetAtt IotDeviceSimApiLambdaExecRole.Arn
                    "/admin/settings":
                        options:
                            consumes:
                                - "application/json"
                            produces:
                                - "application/json"
                            responses:
                                "200":
                                    description: "200 response"
                                    schema:
                                        $ref: "#/definitions/Empty"
                                    headers:
                                        Access-Control-Allow-Origin:
                                            type: "string"
                                        Access-Control-Allow-Methods:
                                            type: "string"
                                        Access-Control-Allow-Headers:
                                            type: "string"
                            x-amazon-apigateway-integration:
                                responses:
                                    default:
                                        statusCode: "200"
                                        responseParameters:
                                            method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                                            method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                                            method.response.header.Access-Control-Allow-Origin: "'*'"
                                requestTemplates:
                                    application/json: '{"statusCode": 200}'
                                passthroughBehavior: "when_no_match"
                                type: "mock"
                        x-amazon-apigateway-any-method:
                            produces:
                                - "application/json"
                            responses:
                                "200":
                                    description: "200 response"
                                    schema:
                                        $ref: "#/definitions/Empty"
                            security:
                                - iot-sim-authorizer: []
                            x-amazon-apigateway-integration:
                                responses:
                                    default:
                                        statusCode: "200"
                                uri:
                                    Fn::Sub: "arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IotDeviceSimAdminService.Arn}/invocations"
                                passthroughBehavior: "when_no_match"
                                httpMethod: "POST"
                                contentHandling: "CONVERT_TO_TEXT"
                                type: "aws_proxy"
                                credentials: !GetAtt IotDeviceSimApiLambdaExecRole.Arn
                    "/admin/users":
                        options:
                            consumes:
                                - "application/json"
                            produces:
                                - "application/json"
                            responses:
                                "200":
                                    description: "200 response"
                                    schema:
                                        $ref: "#/definitions/Empty"
                                    headers:
                                        Access-Control-Allow-Origin:
                                            type: "string"
                                        Access-Control-Allow-Methods:
                                            type: "string"
                                        Access-Control-Allow-Headers:
                                            type: "string"
                            x-amazon-apigateway-integration:
                                responses:
                                    default:
                                        statusCode: "200"
                                        responseParameters:
                                            method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                                            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                                            method.response.header.Access-Control-Allow-Origin: "'*'"
                                requestTemplates:
                                    application/json: '{"statusCode": 200}'
                                passthroughBehavior: "when_no_match"
                                type: "mock"
                        x-amazon-apigateway-any-method:
                            produces:
                                - "application/json"
                            responses:
                                "200":
                                    description: "200 response"
                                    schema:
                                        $ref: "#/definitions/Empty"
                            security:
                                - iot-sim-authorizer: []
                            x-amazon-apigateway-integration:
                                responses:
                                    default:
                                        statusCode: "200"
                                uri:
                                    Fn::Sub: "arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IotDeviceSimAdminService.Arn}/invocations"
                                passthroughBehavior: "when_no_match"
                                httpMethod: "POST"
                                contentHandling: "CONVERT_TO_TEXT"
                                type: "aws_proxy"
                                credentials: !GetAtt IotDeviceSimApiLambdaExecRole.Arn
                    "/admin/users/{user_id}":
                        options:
                            consumes:
                                - "application/json"
                            produces:
                                - "application/json"
                            responses:
                                "200":
                                    description: "200 response"
                                    schema:
                                        $ref: "#/definitions/Empty"
                                    headers:
                                        Access-Control-Allow-Origin:
                                            type: "string"
                                        Access-Control-Allow-Methods:
                                            type: "string"
                                        Access-Control-Allow-Headers:
                                            type: "string"
                            x-amazon-apigateway-integration:
                                responses:
                                    default:
                                        statusCode: "200"
                                        responseParameters:
                                            method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                                            method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                                            method.response.header.Access-Control-Allow-Origin: "'*'"
                                requestTemplates:
                                    application/json: '{"statusCode": 200}'
                                passthroughBehavior: "when_no_match"
                                type: "mock"
                        x-amazon-apigateway-any-method:
                            produces:
                                - "application/json"
                            parameters:
                                - name: "user_id"
                                  in: "path"
                                  required: true
                                  type: "string"
                            responses:
                                "200":
                                    description: "200 response"
                                    schema:
                                        $ref: "#/definitions/Empty"
                            security:
                                - iot-sim-authorizer: []
                            x-amazon-apigateway-integration:
                                responses:
                                    default:
                                        statusCode: "200"
                                uri:
                                    Fn::Sub: "arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IotDeviceSimAdminService.Arn}/invocations"
                                passthroughBehavior: "when_no_match"
                                httpMethod: "POST"
                                contentHandling: "CONVERT_TO_TEXT"
                                type: "aws_proxy"
                                credentials: !GetAtt IotDeviceSimApiLambdaExecRole.Arn
                    "/profile":
                        options:
                            consumes:
                                - "application/json"
                            produces:
                                - "application/json"
                            responses:
                                "200":
                                    description: "200 response"
                                    schema:
                                        $ref: "#/definitions/Empty"
                                    headers:
                                        Access-Control-Allow-Origin:
                                            type: "string"
                                        Access-Control-Allow-Methods:
                                            type: "string"
                                        Access-Control-Allow-Headers:
                                            type: "string"
                            x-amazon-apigateway-integration:
                                responses:
                                    default:
                                        statusCode: "200"
                                        responseParameters:
                                            method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                                            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                                            method.response.header.Access-Control-Allow-Origin: "'*'"
                                requestTemplates:
                                    application/json: '{"statusCode": 200}'
                                passthroughBehavior: "when_no_match"
                                type: "mock"
                        x-amazon-apigateway-any-method:
                            produces:
                                - "application/json"
                            responses:
                                "200":
                                    description: "200 response"
                                    schema:
                                        $ref: "#/definitions/Empty"
                            security:
                                - iot-sim-authorizer: []
                            x-amazon-apigateway-integration:
                                responses:
                                    default:
                                        statusCode: "200"
                                uri:
                                    Fn::Sub: "arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IotDeviceSimProfileService.Arn}/invocations"
                                passthroughBehavior: "when_no_match"
                                httpMethod: "POST"
                                contentHandling: "CONVERT_TO_TEXT"
                                type: "aws_proxy"
                                credentials: !GetAtt IotDeviceSimApiLambdaExecRole.Arn
                    "/metrics":
                        options:
                            consumes:
                                - "application/json"
                            produces:
                                - "application/json"
                            responses:
                                "200":
                                    description: "200 response"
                                    schema:
                                        $ref: "#/definitions/Empty"
                                    headers:
                                        Access-Control-Allow-Origin:
                                            type: "string"
                                        Access-Control-Allow-Methods:
                                            type: "string"
                                        Access-Control-Allow-Headers:
                                            type: "string"
                            x-amazon-apigateway-integration:
                                responses:
                                    default:
                                        statusCode: "200"
                                        responseParameters:
                                            method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                                            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                                            method.response.header.Access-Control-Allow-Origin: "'*'"
                                requestTemplates:
                                    application/json: '{"statusCode": 200}'
                                passthroughBehavior: "when_no_match"
                                type: "mock"
                        x-amazon-apigateway-any-method:
                            produces:
                                - "application/json"
                            responses:
                                "200":
                                    description: "200 response"
                                    schema:
                                        $ref: "#/definitions/Empty"
                            security:
                                - iot-sim-authorizer: []
                            x-amazon-apigateway-integration:
                                responses:
                                    default:
                                        statusCode: "200"
                                uri:
                                    Fn::Sub: "arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IotDeviceSimMetricsService.Arn}/invocations"
                                passthroughBehavior: "when_no_match"
                                httpMethod: "POST"
                                contentHandling: "CONVERT_TO_TEXT"
                                type: "aws_proxy"
                                credentials: !GetAtt IotDeviceSimApiLambdaExecRole.Arn
                    "/devices/types":
                        options:
                            consumes:
                                - "application/json"
                            produces:
                                - "application/json"
                            responses:
                                "200":
                                    description: "200 response"
                                    schema:
                                        $ref: "#/definitions/Empty"
                                    headers:
                                        Access-Control-Allow-Origin:
                                            type: "string"
                                        Access-Control-Allow-Methods:
                                            type: "string"
                                        Access-Control-Allow-Headers:
                                            type: "string"
                            x-amazon-apigateway-integration:
                                responses:
                                    default:
                                        statusCode: "200"
                                        responseParameters:
                                            method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                                            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                                            method.response.header.Access-Control-Allow-Origin: "'*'"
                                requestTemplates:
                                    application/json: '{"statusCode": 200}'
                                passthroughBehavior: "when_no_match"
                                type: "mock"
                        x-amazon-apigateway-any-method:
                            produces:
                                - "application/json"
                            responses:
                                "200":
                                    description: "200 response"
                                    schema:
                                        $ref: "#/definitions/Empty"
                            security:
                                - iot-sim-authorizer: []
                            x-amazon-apigateway-integration:
                                responses:
                                    default:
                                        statusCode: "200"
                                uri:
                                    Fn::Sub: "arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IotDeviceSimDeviceService.Arn}/invocations"
                                passthroughBehavior: "when_no_match"
                                httpMethod: "POST"
                                contentHandling: "CONVERT_TO_TEXT"
                                type: "aws_proxy"
                                credentials: !GetAtt IotDeviceSimApiLambdaExecRole.Arn
                    "/devices/types/{typeid}":
                        options:
                            consumes:
                                - "application/json"
                            produces:
                                - "application/json"
                            responses:
                                "200":
                                    description: "200 response"
                                    schema:
                                        $ref: "#/definitions/Empty"
                                    headers:
                                        Access-Control-Allow-Origin:
                                            type: "string"
                                        Access-Control-Allow-Methods:
                                            type: "string"
                                        Access-Control-Allow-Headers:
                                            type: "string"
                            x-amazon-apigateway-integration:
                                responses:
                                    default:
                                        statusCode: "200"
                                        responseParameters:
                                            method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                                            method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                                            method.response.header.Access-Control-Allow-Origin: "'*'"
                                requestTemplates:
                                    application/json: '{"statusCode": 200}'
                                passthroughBehavior: "when_no_match"
                                type: "mock"
                        x-amazon-apigateway-any-method:
                            produces:
                                - "application/json"
                            parameters:
                                - name: "typeid"
                                  in: "path"
                                  required: true
                                  type: "string"
                            responses:
                                "200":
                                    description: "200 response"
                                    schema:
                                        $ref: "#/definitions/Empty"
                            security:
                                - iot-sim-authorizer: []
                            x-amazon-apigateway-integration:
                                responses:
                                    default:
                                        statusCode: "200"
                                uri:
                                    Fn::Sub: "arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IotDeviceSimDeviceService.Arn}/invocations"
                                passthroughBehavior: "when_no_match"
                                httpMethod: "POST"
                                contentHandling: "CONVERT_TO_TEXT"
                                type: "aws_proxy"
                                credentials: !GetAtt IotDeviceSimApiLambdaExecRole.Arn
                    "/devices/widgets":
                        options:
                            consumes:
                                - "application/json"
                            produces:
                                - "application/json"
                            responses:
                                "200":
                                    description: "200 response"
                                    schema:
                                        $ref: "#/definitions/Empty"
                                    headers:
                                        Access-Control-Allow-Origin:
                                            type: "string"
                                        Access-Control-Allow-Methods:
                                            type: "string"
                                        Access-Control-Allow-Headers:
                                            type: "string"
                            x-amazon-apigateway-integration:
                                responses:
                                    default:
                                        statusCode: "200"
                                        responseParameters:
                                            method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                                            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                                            method.response.header.Access-Control-Allow-Origin: "'*'"
                                requestTemplates:
                                    application/json: '{"statusCode": 200}'
                                passthroughBehavior: "when_no_match"
                                type: "mock"
                        x-amazon-apigateway-any-method:
                            produces:
                                - "application/json"
                            responses:
                                "200":
                                    description: "200 response"
                                    schema:
                                        $ref: "#/definitions/Empty"
                            security:
                                - iot-sim-authorizer: []
                            x-amazon-apigateway-integration:
                                responses:
                                    default:
                                        statusCode: "200"
                                uri:
                                    Fn::Sub: "arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IotDeviceSimDeviceService.Arn}/invocations"
                                passthroughBehavior: "when_no_match"
                                httpMethod: "POST"
                                contentHandling: "CONVERT_TO_TEXT"
                                type: "aws_proxy"
                                credentials: !GetAtt IotDeviceSimApiLambdaExecRole.Arn
                    "/devices/widgets/{deviceid}":
                        options:
                            consumes:
                                - "application/json"
                            produces:
                                - "application/json"
                            responses:
                                "200":
                                    description: "200 response"
                                    schema:
                                        $ref: "#/definitions/Empty"
                                    headers:
                                        Access-Control-Allow-Origin:
                                            type: "string"
                                        Access-Control-Allow-Methods:
                                            type: "string"
                                        Access-Control-Allow-Headers:
                                            type: "string"
                            x-amazon-apigateway-integration:
                                responses:
                                    default:
                                        statusCode: "200"
                                        responseParameters:
                                            method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                                            method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                                            method.response.header.Access-Control-Allow-Origin: "'*'"
                                requestTemplates:
                                    application/json: '{"statusCode": 200}'
                                passthroughBehavior: "when_no_match"
                                type: "mock"
                        x-amazon-apigateway-any-method:
                            produces:
                                - "application/json"
                            parameters:
                                - name: "deviceid"
                                  in: "path"
                                  required: true
                                  type: "string"
                            responses:
                                "200":
                                    description: "200 response"
                                    schema:
                                        $ref: "#/definitions/Empty"
                            security:
                                - iot-sim-authorizer: []
                            x-amazon-apigateway-integration:
                                responses:
                                    default:
                                        statusCode: "200"
                                uri:
                                    Fn::Sub: "arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IotDeviceSimDeviceService.Arn}/invocations"
                                passthroughBehavior: "when_no_match"
                                httpMethod: "POST"
                                contentHandling: "CONVERT_TO_TEXT"
                                type: "aws_proxy"
                                credentials: !GetAtt IotDeviceSimApiLambdaExecRole.Arn
                    "/openidtoken":
                        options:
                            consumes:
                                - "application/json"
                            produces:
                                - "application/json"
                            responses:
                                "200":
                                    description: "200 response"
                                    schema:
                                        $ref: "#/definitions/Empty"
                                    headers:
                                        Access-Control-Allow-Origin:
                                            type: "string"
                                        Access-Control-Allow-Methods:
                                            type: "string"
                                        Access-Control-Allow-Headers:
                                            type: "string"
                            x-amazon-apigateway-integration:
                                responses:
                                    default:
                                        statusCode: "200"
                                        responseParameters:
                                            method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                                            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                                            method.response.header.Access-Control-Allow-Origin: "'*'"
                                requestTemplates:
                                    application/json: '{"statusCode": 200}'
                                passthroughBehavior: "when_no_match"
                                type: "mock"
                        x-amazon-apigateway-any-method:
                            produces:
                                - "application/json"
                            responses:
                                "200":
                                    description: "200 response"
                                    schema:
                                        $ref: "#/definitions/Empty"
                            security:
                                - iot-sim-authorizer: []
                            x-amazon-apigateway-integration:
                                responses:
                                    default:
                                        statusCode: "200"
                                uri:
                                    Fn::Sub: "arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OpenIDTokenService.Arn}/invocations"
                                passthroughBehavior: "when_no_match"
                                httpMethod: "POST"
                                contentHandling: "CONVERT_TO_TEXT"
                                type: "aws_proxy"
                                credentials: !GetAtt IotDeviceSimApiLambdaExecRole.Arn

                #[Note]: Remove Cognito user pool
                # securityDefinitions:
                #     iot-sim-authorizer:
                #         type: "apiKey"
                #         name: "Authorization"
                #         in: "header"
                #         x-amazon-apigateway-authtype: "cognito_user_pools"
                #         x-amazon-apigateway-authorizer:
                #             providerARNs:
                #                 - !Join [
                #                       "",
                #                       [
                #                           "arn:aws:cognito-idp:",
                #                           Ref: "AWS::Region",
                #                           ":",
                #                           Ref: "AWS::AccountId",
                #                           ":userpool/",
                #                           !Ref IotDeviceSimUserPool,
                #                       ],
                #                   ]
                #             type: "cognito_user_pools"
                definitions:
                    Empty:
                        type: "object"
                        title: "Empty Schema"

    CloudWatchRole:
        Type: "AWS::IAM::Role"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    - id: W11
                      reason: "permission neeeded for Api Gateway to put access logs on CW"
        Properties:
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - apigateway.amazonaws.com
                      Action: "sts:AssumeRole"
            Path: /
            Policies:
                - PolicyName: "IotDeviceSimulatorApiAccessLog-Policy"
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Effect: "Allow"
                            Action:
                                - "logs:CreateLogGroup"
                                - "logs:CreateLogStream"
                                - "logs:DescribeLogGroups"
                                - "logs:DescribeLogStreams"
                                - "logs:PutLogEvents"
                                - "logs:GetLogEvents"
                                - "logs:FilterLogEvents"
                            Resource:
                                - "*"

    ApiAccountLogging:
        Type: "AWS::ApiGateway::Account"
        Properties:
            CloudWatchRoleArn: !GetAtt
                - CloudWatchRole
                - Arn

    IotDeviceSimApiDeployment:
        Type: "AWS::ApiGateway::Deployment"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    - id: W68
                      reason: "Deployment resources should be associated with an AWS::ApiGateway::UsagePlan"
        DependsOn: ApiAccountLogging
        Properties:
            RestApiId: !Ref IotDeviceSimApi
            Description: "Production"
            StageName: "prod"
            StageDescription:
                AccessLogSetting:
                    DestinationArn: !Sub ${IotDeviceSimAPILogs.Arn}
                    Format: '{ "requestId": "$context.requestId","ip": "$context.identity.sourceIp","caller": "$context.identity.caller","user": "$context.identity.user","userAgent": "$context.identity.userAgent","requestTime": "$context.requestTime","httpMethod": "$context.httpMethod","resourcePath": "$context.resourcePath","status": "$context.status","protocol": "$context.protocol","responseLength": "$context.responseLength"}'
    # API [end]

    # Userpool [start]
    # [Note]: Remove Cognito User Pool
    # IotDeviceSimUserPool:
    #     Type: "AWS::Cognito::UserPool"
    #     Properties:
    #         UserPoolName: "iot-device-simulator-pool"
    #         AdminCreateUserConfig:
    #             AllowAdminCreateUserOnly: True
    #             InviteMessageTemplate:
    #                 EmailMessage: !Sub |
    #                     <p>You are invited to join the IoT Device Simulator. Your temporary password is as follows:</p>
    #                     <p>
    #                     Password: <strong>{####}</strong><br />
    #                     id: {username}
    #                     </p>
    #                     <p>
    #                     Please sign in to the IoT Device Simulator with your email address and temporary password provided above at: <br />
    #                     https://${IotSimWebsiteDistribution.DomainName}
    #                     </p>
    #                 EmailSubject:
    #                     !Join [
    #                         " ",
    #                         [
    #                             "Your",
    #                             !FindInMap ["SourceCode", "App", "FullName"],
    #                             "login.",
    #                         ],
    #                     ]
    #                 SMSMessage: "Your username is {username} and temporary password is {####}."
    #             UnusedAccountValidityDays: 7
    #         AliasAttributes:
    #             - "email"
    #         AutoVerifiedAttributes:
    #             - "email"
    #         EmailVerificationMessage: "Your IoT Device Simulator verification code is {####}."
    #         EmailVerificationSubject: "Your IoT Device Simulator verification code"
    #         Policies:
    #             PasswordPolicy:
    #                 MinimumLength: 8
    #                 RequireLowercase: True
    #                 RequireNumbers: True
    #                 RequireSymbols: False
    #                 RequireUppercase: True
    #         Schema:
    #             - AttributeDataType: "String"
    #               Name: "email"
    #               Required: True

    # IotDeviceSimConsoleClient:
    #     Type: "AWS::Cognito::UserPoolClient"
    #     Properties:
    #         ClientName: "iot-device-simulator-console"
    #         GenerateSecret: False
    #         WriteAttributes:
    #             - "address"
    #             - "email"
    #             - "phone_number"
    #         ReadAttributes:
    #             - "name"
    #             - "family_name"
    #             - "given_name"
    #             - "middle_name"
    #             - "nickname"
    #             - "preferred_username"
    #             - "updated_at"
    #             - "email"
    #             - "email_verified"
    #             - "address"
    #             - "phone_number"
    #             - "phone_number_verified"
    #         RefreshTokenValidity: 1
    #         UserPoolId: !Ref IotDeviceSimUserPool

    # IotDeviceSimAdminCognitoGroup:
    #     Type: "AWS::Cognito::UserPoolGroup"
    #     Properties:
    #         Description: "Administrator group for managing IoT Deivce Simulator web interface"
    #         GroupName: "Administrators"
    #         UserPoolId: !Ref IotDeviceSimUserPool

    # IotDeviceSimMemberCognitoGroup:
    #     Type: "AWS::Cognito::UserPoolGroup"
    #     Properties:
    #         Description: "Member group for access to the IoT Deivce Simulator web interface"
    #         GroupName: "Members"
    #         UserPoolId: !Ref IotDeviceSimUserPool

    # IotDeviceSimAdminCognitoUser:
    #     Type: "AWS::Cognito::UserPoolUser"
    #     Properties:
    #         DesiredDeliveryMediums:
    #             - EMAIL
    #         ForceAliasCreation: True
    #         UserAttributes:
    #             - Name: email
    #               Value: !Ref AdministratorEmail
    #             - Name: nickname
    #               Value: !Ref AdministratorName
    #             - Name: email_verified
    #               Value: True
    #         Username:
    #             !Join [
    #                 "_",
    #                 !Split [
    #                     ".",
    #                     !Join ["_", !Split ["@", !Ref AdministratorEmail]],
    #                 ],
    #             ]
    #         UserPoolId: !Ref IotDeviceSimUserPool

    # IotDeviceSimAdminGroupAssignment:
    #     Type: "AWS::Cognito::UserPoolUserToGroupAttachment"
    #     Properties:
    #         GroupName: !Ref IotDeviceSimAdminCognitoGroup
    #         Username: !Ref IotDeviceSimAdminCognitoUser
    #         UserPoolId: !Ref IotDeviceSimUserPool



    # Userpool [end]

    # Simulation Engine - ECS [start]

    IotDeviceSimEngineCluster:
        Type: "AWS::ECS::Cluster"
        Properties:
            ClusterName: "iot-device-simulation"

    IotDeviceSimEngineTaskDefinition:
        Type: "AWS::ECS::TaskDefinition"
        Properties:
            ExecutionRoleArn: !GetAtt IotDeviceSimEngineTaskExecutionRole.Arn
            Family: "iot-simulation-engine-task"
            RequiresCompatibilities:
                - "FARGATE"
            Memory: "4096"
            Cpu: "1024"
            NetworkMode: "awsvpc"
            TaskRoleArn: !GetAtt IotDeviceSimEngineTaskRole.Arn
            ContainerDefinitions:
                - LogConfiguration:
                      LogDriver: "awslogs"
                      Options:
                          awslogs-group: "/ecs/iot-simulation-engine-task"
                          awslogs-region:
                              Fn::Sub: "${AWS::Region}"
                          awslogs-stream-prefix: "ecs"
                  Cpu: 1024
                  Image: "753680513547.dkr.ecr.cn-north-1.amazonaws.com.cn/iotsim:v2.1"
                  Name: "iot-simulation-engine-container"
                  Essential: True

    IotDeviceSimEngineServiceDefinition:
        Type: "AWS::ECS::Service"
        Properties:
            ServiceName: "simulation-engine-service"
            TaskDefinition: !Ref IotDeviceSimEngineTaskDefinition
            Cluster: !GetAtt IotDeviceSimEngineCluster.Arn
            DeploymentConfiguration:
                MaximumPercent: 200
                MinimumHealthyPercent: 50
            DesiredCount: 2
            LaunchType: "FARGATE"
            NetworkConfiguration:
                AwsvpcConfiguration:
                    AssignPublicIp: "DISABLED"
                    SecurityGroups:
                        - !Ref IotSimEngineIntraVPCSecurityGroup
                    Subnets:
                        - !Ref IotSimEnginePrivateSubnet1A
                        - !Ref IotSimEnginePrivateSubnet1B
        DependsOn:
            - IotDeviceSimEngineSettings
            - IotDeviceSimAppSettings
            - IotDeviceSimAutomotiveSettings
            - IotDeviceSimDefaultAutoDevice

    # Simulation Engine - ECS [end]

    # Custom resources [start]

    IotDeviceSimAppUuid:
        Type: "Custom::LoadLambda"
        Properties:
            ServiceToken:
                Fn::GetAtt:
                    - "IotDeviceSimHelper"
                    - "Arn"
            Region:
                - Ref: "AWS::Region"
            customAction: "createUuid"

    IotDeviceSimAppEndpoint:
        Type: "Custom::LoadLambda"
        Properties:
            ServiceToken:
                Fn::GetAtt:
                    - "IotDeviceSimHelper"
                    - "Arn"
            Region:
                - Ref: "AWS::Region"
            customAction: "getIotEndpoint"

    IotDeviceSimWebsite:
        Type: "Custom::LoadLambda"
        Properties:
            ServiceToken:
                Fn::GetAtt:
                    - "IotDeviceSimHelper"
                    - "Arn"
            Region:
                - Ref: "AWS::Region"
            manifestKey:
                !Join [
                    "/",
                    [
                        !FindInMap ["SourceCode", "General", "KeyPrefix"],
                        "site-manifest.json",
                    ],
                ]
            sourceS3Bucket:
                !Join [
                    "-",
                    [
                        !FindInMap ["SourceCode", "General", "S3Bucket"],
                        Ref: "AWS::Region",
                    ],
                ]
            sourceS3key:
                !Join [
                    "/",
                    [
                        !FindInMap ["SourceCode", "General", "KeyPrefix"],
                        "console",
                    ],
                ]
            destS3Bucket: !Ref IotSimWebsiteBucket
            version: "%%VERSION%%"
            customAction: "copyS3assets"

    IotDeviceSimWebConfig:
        Type: "Custom::LoadLambda"
        Properties:
            ServiceToken:
                Fn::GetAtt:
                    - "IotDeviceSimHelper"
                    - "Arn"
            Region:
                - Ref: "AWS::Region"
            destS3Bucket: !Ref IotSimWebsiteBucket
            destS3key: "assets/appVariables.js"
            configItem:
                # USER_POOL_ID:
                #     Fn::Sub: "${IotDeviceSimUserPool}"
                # USER_POOL_CLIENT_ID:
                #     Fn::Sub: "${IotDeviceSimConsoleClient}"
                # IDENTITY_POOL_ID:
                #     Fn::Sub: "${IotDeviceSimIdentityPool}"
                COGNITO_IDP_ENDPOINT: ""
                COGNITO_IDENTITY_ENDPOINT: ""
                PRINCIPAL_POLICY:
                    Fn::Sub: "${IotDeviceSimPrincipalPolicy}"
                APIG_ENDPOINT:
                    !Join [
                        "",
                        [
                            "https://",
                            Ref: IotDeviceSimApi,
                            ".execute-api.",
                            Ref: "AWS::Region",
                            ".amazonaws.com.cn/prod",
                        ],
                    ]
                IOT_ENDPOINT: !GetAtt IotDeviceSimAppEndpoint.endpoint
                IDENTITYPOOLID: !GetAtt IotDeviceSimIAMCognitoIdentityPool.CognitoIdentityPoolID
                AUTHING_APPID: !Ref AuthingAppId
                # AUTHING_APPSECRET: !Ref AuthingAppSecret
                AUTHING_APPLICATION: !Ref AuthingAppName
                # AUTHING_APPREDIRECTURL: !Ref AuthingAppRedirectUrl
                AUTHING_APPREDIRECTURL: !Sub
                    - "http://${WebSiteBucketName}.s3-website.${AWS::Region}.amazonaws.com.cn/home/login"
                    - { WebSiteBucketName: !Ref IotSimWebsiteBucket }

                AUTHING_OIDC: !Ref AuthingAppOidc
                MAPX_TOKEN: !Ref  MapxToken
                REGION:
                    Fn::Sub: "${AWS::Region}"
            customAction: "putConfigFile"

    IotDeviceSimRoutes:
        Type: "Custom::LoadLambda"
        Properties:
            ServiceToken:
                Fn::GetAtt:
                    - "IotDeviceSimHelper"
                    - "Arn"
            Region:
                - Ref: "AWS::Region"
            manifestKey:
                !Join [
                    "/",
                    [
                        !FindInMap ["SourceCode", "General", "KeyPrefix"],
                        "routes-manifest.json",
                    ],
                ]
            sourceS3Bucket:
                !Join [
                    "-",
                    [
                        !FindInMap ["SourceCode", "General", "S3Bucket"],
                        Ref: "AWS::Region",
                    ],
                ]
            sourceS3key:
                !Join [
                    "/",
                    [
                        !FindInMap ["SourceCode", "General", "KeyPrefix"],
                        "routedata",
                    ],
                ]
            destS3Bucket: !Ref IotSimDataBucket
            customAction: "copyS3assets"

    IotDeviceSimAnonymousMetric:
        Type: "Custom::LoadLambda"
        Properties:
            ServiceToken:
                Fn::GetAtt:
                    - "IotDeviceSimHelper"
                    - "Arn"
            Region:
                - Ref: "AWS::Region"
            solutionId: "SO0041"
            UUID: !GetAtt IotDeviceSimAppUuid.UUID
            version: "1.0"
            anonymousData: !FindInMap ["Send", "AnonymousUsage", "Data"]
            customAction: "sendMetric"

    IotDeviceSimEngineSettings:
        Type: "Custom::LoadLambda"
        Properties:
            ServiceToken:
                Fn::GetAtt:
                    - "IotDeviceSimHelper"
                    - "Arn"
            Region:
                - Ref: "AWS::Region"
            ddbTable: !Ref SettingsTable
            ddbItem:
                settingId: "simulator"
                type: "config"
                setting:
                    deviceQueueUrl: !Ref IotDeviceSimQueue
                    deviceTable: !Ref DeviceWidgetsTable
                    deviceTypeTable: !Ref DeviceTypesTable
                    garbageCollectionInterval:
                        N: 60000
                    targetIotRegion:
                        Fn::Sub: "${AWS::Region}"
                    loggingLevel:
                        N: 1
                    metricsTable: !Ref MetricsTable
                    queuePollerInterval:
                        N: 10000
                    region:
                        Fn::Sub: "${AWS::Region}"
                    uuid: !GetAtt IotDeviceSimAppUuid.UUID
                    anonymousData: !FindInMap ["Send", "AnonymousUsage", "Data"]
            customAction: "saveDdbItem"

    IotDeviceSimAppSettings:
        Type: "Custom::LoadLambda"
        Properties:
            ServiceToken:
                Fn::GetAtt:
                    - "IotDeviceSimHelper"
                    - "Arn"
            Region:
                - Ref: "AWS::Region"
            ddbTable: !Ref SettingsTable
            ddbItem:
                settingId: "app-config"
                type: "config"
                setting:
                    # idp: !Ref IotDeviceSimUserPool
                    apiEndpoint:
                        !Join [
                            "",
                            [
                                "https://",
                                Ref: IotDeviceSimApi,
                                ".execute-api.",
                                Ref: "AWS::Region",
                                # ".amazonaws.com/prod",
                                ".amazonaws.com.cn/prod",
                            ],
                        ]
                    uuid: !GetAtt IotDeviceSimAppUuid.UUID
                    anonymousData: !FindInMap ["Send", "AnonymousUsage", "Data"]
                    mapboxToken: "NA"
            customAction: "saveDdbItem"

    IotDeviceSimCurrentSettings:
        Type: "Custom::LoadLambda"
        Properties:
            ServiceToken:
                Fn::GetAtt:
                    - "IotDeviceSimHelper"
                    - "Arn"
            Region:
                - Ref: "AWS::Region"
            ddbTable: !Ref SettingsTable
            ddbItem:
                settingId: "current-sims"
                type: "counter"
                setting:
                    N: 0
            customAction: "saveDdbItem"

    IotDeviceSimAutomotiveSettings:
        Type: "Custom::LoadLambda"
        Properties:
            ServiceToken:
                Fn::GetAtt:
                    - "IotDeviceSimHelper"
                    - "Arn"
            Region:
                - Ref: "AWS::Region"
            ddbTable: !Ref SettingsTable
            ddbItem:
                settingId: "automotive"
                type: "config"
                setting:
                    routeBucket: !Ref IotSimDataBucket
                    routeManifestPath: "routes/manifest.json"
            customAction: "saveDdbItem"

    IotDeviceSimDefaultAutoDevice:
        Type: "Custom::LoadLambda"
        Properties:
            ServiceToken:
                Fn::GetAtt:
                    - "IotDeviceSimHelper"
                    - "Arn"
            Region:
                - Ref: "AWS::Region"
            ddbTable: !Ref DeviceTypesTable
            ddbItem:
                userId: "_default_"
                typeId: "automotive"
                name: "vehicle"
                custom:
                    B: false
                spec:
                    aggregateMetrics: true
                    aggregationTransmissionTime:
                        N: 90000
                    dataAggregatedTopic: "connectedcar/trip"
                    dataTopic: "connectedcar/telemetry"
                    errorTopic: "connectedcar/dtc"
                    measurementPollerInterval:
                        N: 2000
                    tripBucket: !Ref IotSimDataBucket
                    sendAggregatedData:
                        B: true
                    sendErrorData:
                        B: true
                    sendTelemetryData:
                        B: true
                    telemetrySchema:
                        - attribute: "name"
                          value: "measurement_name"
                        - attribute: "value"
                          value: "measurement_value"
                        - attribute: "vin"
                          value: "vin"
                        - attribute: "trip_id"
                          value: "trip_id"
                        - attribute: "timestamp"
                          value: "timestamp"
            customAction: "saveDdbItem"
    # China Solution builder added
    # Cognito Identity pool and IAM OpenID connector
    IotDeviceSimIAMCognitoIdentityPool:
        Type: "Custom::LoadLambda"
        Properties:
            ServiceToken:
                Fn::GetAtt:
                    - "IotDeviceSimHelper"
                    - "Arn"
            Region:
                - Ref: "AWS::Region"
            authing_thumb:
                - value: !Ref AuthingThumbPrint
            authing_app_url:
                - value: !Ref AuthingAppUrl
            authing_app_id:
                - value: !Ref AuthingAppId
            identity_pool_name:
                - value: "IdentityPoolName"
            customAction: "CreateIAMAndCognito"

    IotDeviceSimIAMCognitoIdentityPoolAttachRole:
        Type: "Custom::LoadLambda"
        Properties:
            ServiceToken:
                Fn::GetAtt:
                    - "IotDeviceSimHelper"
                    - "Arn"
            Region:
                - Ref: "AWS::Region"
            identitypoolid:
                - value: !GetAtt IotDeviceSimIAMCognitoIdentityPool.CognitoIdentityPoolID
            cognitorolarn:
                - value: !GetAtt IotDeviceSimIdentityPoolAuthRole.Arn
            customAction: "AttachCognitoIdentityrole"
    # Custom resources [end]

    # Microservices [start]
    OpenIDTokenService:
        Type: "AWS::Lambda::Function"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    - id: W58
                      reason: "Lambda functions require permission to write CloudWatch Logs"
        Properties:
            FunctionName: "iot-sim-openidtoken-service"
            Description: "IoT Device Simulator Solution OpenID Token microservice"
            Code:
                S3Bucket:
                    !Join [
                        "-",
                        [
                            !FindInMap ["SourceCode", "General", "S3Bucket"],
                            Ref: "AWS::Region",
                        ],
                    ]
                S3Key:
                    !Join [
                        "/",
                        [
                            !FindInMap ["SourceCode", "General", "KeyPrefix"],
                            "iot-sim-openidtoken-service.zip",
                        ],
                    ]
            Handler: index.handler
            Runtime: nodejs12.x
            Role: !GetAtt IotDeviceSimOpenIDTokenRole.Arn
            Timeout: 60
            MemorySize: 256
            Environment:
                Variables:
                    SETTINGS_TBL: !Ref SettingsTable
                    LOGGING_LEVEL: 2
                    AuthingAppUrl : !Ref AuthingAppUrl
                    AuthingAppId :  !Ref AuthingAppId
                    AuthingAppSecret :  !Ref AuthingAppSecret
                    AuthingRSAsignature: !Ref  AuthingRSAsignature


    IotDeviceSimAdminService:
        Type: "AWS::Lambda::Function"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    - id: W58
                      reason: "Lambda functions require permission to write CloudWatch Logs"
        Properties:
            FunctionName: "iot-sim-admin-service"
            Description: "IoT Device Simulator Solution administration microservice"
            Code:
                S3Bucket:
                    !Join [
                        "-",
                        [
                            !FindInMap ["SourceCode", "General", "S3Bucket"],
                            Ref: "AWS::Region",
                        ],
                    ]
                S3Key:
                    !Join [
                        "/",
                        [
                            !FindInMap ["SourceCode", "General", "KeyPrefix"],
                            "iot-sim-admin-service.zip",
                        ],
                    ]
            Handler: index.handler
            Runtime: nodejs12.x
            Role: !GetAtt IotDeviceSimAdminRole.Arn
            Timeout: 60
            MemorySize: 256
            Environment:
                Variables:
                    SETTINGS_TBL: !Ref SettingsTable
                    LOGGING_LEVEL: 2
                    AuhtingApplicationURL: !Ref AuthingAppUrl
                    AuthingAppId: !Ref AuthingAppId
                    AuthingRSAsignature: !Ref  AuthingRSAsignature

    IotDeviceSimProfileService:
        Type: "AWS::Lambda::Function"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    - id: W58
                      reason: "Lambda functions require permission to write CloudWatch Logs"
        Properties:
            FunctionName: "iot-sim-profile-service"
            Description: "IoT Device Simulator Solution profile microservice"
            Code:
                S3Bucket:
                    !Join [
                        "-",
                        [
                            !FindInMap ["SourceCode", "General", "S3Bucket"],
                            Ref: "AWS::Region",
                        ],
                    ]
                S3Key:
                    !Join [
                        "/",
                        [
                            !FindInMap ["SourceCode", "General", "KeyPrefix"],
                            "iot-sim-profile-service.zip",
                        ],
                    ]
            Handler: index.handler
            Runtime: nodejs12.x
            Role: !GetAtt IotDeviceSimProfileRole.Arn
            Timeout: 60
            MemorySize: 256
            Environment:
                Variables:
                    SETTINGS_TBL: !Ref SettingsTable
                    LOGGING_LEVEL: 2
                    AuhtingApplicationURL: !Ref AuthingAppUrl
                    AuthingAppId: !Ref AuthingAppId
                    AuthingRSAsignature: !Ref  AuthingRSAsignature

    IotDeviceSimMetricsService:
        Type: "AWS::Lambda::Function"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    - id: W58
                      reason: "Lambda functions require permission to write CloudWatch Logs"
        Properties:
            FunctionName: "iot-sim-metrics-service"
            Description: "IoT Device Simulator Solution metrics microservice"
            Code:
                S3Bucket:
                    !Join [
                        "-",
                        [
                            !FindInMap ["SourceCode", "General", "S3Bucket"],
                            Ref: "AWS::Region",
                        ],
                    ]
                S3Key:
                    !Join [
                        "/",
                        [
                            !FindInMap ["SourceCode", "General", "KeyPrefix"],
                            "iot-sim-metrics-service.zip",
                        ],
                    ]
            Handler: index.handler
            Runtime: nodejs12.x
            Role: !GetAtt IotDeviceSimMetricsRole.Arn
            Timeout: 60
            MemorySize: 256
            Environment:
                Variables:
                    SETTINGS_TBL: !Ref SettingsTable
                    LOGGING_LEVEL: 2
                    METRICS_TBL: !Ref MetricsTable
                    AuhtingApplicationURL: !Ref AuthingAppUrl
                    AuthingAppId: !Ref AuthingAppId
                    AuthingRSAsignature: !Ref  AuthingRSAsignature

    IotDeviceSimDeviceService:
        Type: "AWS::Lambda::Function"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    - id: W58
                      reason: "Lambda functions require permission to write CloudWatch Logs"
        Properties:
            FunctionName: "iot-sim-device-service"
            Description: "IoT Device Simulator Solution metrics microservice"
            Code:
                S3Bucket:
                    !Join [
                        "-",
                        [
                            !FindInMap ["SourceCode", "General", "S3Bucket"],
                            Ref: "AWS::Region",
                        ],
                    ]
                S3Key:
                    !Join [
                        "/",
                        [
                            !FindInMap ["SourceCode", "General", "KeyPrefix"],
                            "iot-sim-device-service.zip",
                        ],
                    ]
            Handler: index.handler
            Runtime: nodejs12.x
            Role: !GetAtt IotDeviceSimDeviceRole.Arn
            Timeout: 300
            MemorySize: 256
            Environment:
                Variables:
                    SETTINGS_TBL: !Ref SettingsTable
                    LOGGING_LEVEL: 2
                    DEVICE_TYPES_TBL: !Ref DeviceTypesTable
                    DEVICES_TBL: !Ref DeviceWidgetsTable
                    SIMULATOR_QUEUE: !Ref IotDeviceSimQueue
                    AuhtingApplicationURL: !Ref AuthingAppUrl
                    AuthingAppId: !Ref AuthingAppId
                    AuthingRSAsignature: !Ref  AuthingRSAsignature

    IotDeviceSimHelper:
        Type: "AWS::Lambda::Function"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    - id: W58
                      reason: "Lambda functions require permission to write CloudWatch Logs"
        Properties:
            FunctionName: "iot-device-sim-helper"
            Description: "IoT Device Simulator Solution deployment helper"
            Code:
                S3Bucket:
                    !Join [
                        "-",
                        [
                            !FindInMap ["SourceCode", "General", "S3Bucket"],
                            Ref: "AWS::Region",
                        ],
                    ]
                S3Key:
                    !Join [
                        "/",
                        [
                            !FindInMap ["SourceCode", "General", "KeyPrefix"],
                            "iot-sim-helper.zip",
                        ],
                    ]
            Handler: index.handler
            Runtime: nodejs12.x
            Role: !GetAtt IotDeviceSimResourceHelperRole.Arn
            Timeout: 300
            MemorySize: 256
            Environment:
                Variables:
                    VERSION: "%%VERSION%%"

    # Microservices [end]
    # China Solution Builder team modify
    # Because CloudFormation for Cognito identity pool is not supported in China, use Lambda to create it.
    # IotDeviceSimIdentityPool:
    #     Type: AWS::Cognito::IdentityPool
    #     Properties:
    #         IdentityPoolName: "IoT_Device_Simulator_Pool"
    #         OpenIdConnectProviderARNs: !GetAtt IotDeviceSimIAMCognitoIdentityPool.OpenIdConnectProviderARN
    #         AllowUnauthenticatedIdentities: false
            
    IotDeviceSimIdentityPoolAuthRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: "Allow"
                      Principal:
                          Federated:
                              - "cognito-identity.amazonaws.com"
                      Action:
                          - "sts:AssumeRoleWithWebIdentity"
                      Condition:
                          StringEquals:
                              "cognito-identity.amazonaws.com:aud": !GetAtt IotDeviceSimIAMCognitoIdentityPool.CognitoIdentityPoolID
                          "ForAnyValue:StringLike":
                              "cognito-identity.amazonaws.com:amr": "authenticated"
            Path: "/"

    IotDeviceSimIdentityPoolAuthPolicy:
        Type: "AWS::IAM::ManagedPolicy"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    - id: W13
                      reason: "Policy has been scoped down, resource level permissions not allowed"
                    - id: F5
                      reason: "This is a policy for subscribing to any iot topic because users can simulator to any topic"
        Properties:
            Description: "Policy for the iot device simulator identity pool authorized identities."
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: "Allow"
                      Action:
                          - "mobileanalytics:PutEvents"
                          - "cognito-identity:*"
                      Resource: "*"
                    - Effect: "Allow"
                      Action:
                          - "iot:Connect"
                          - "iot:Subscribe"
                          - "iot:Receive"
                          - "iot:AttachPrincipalPolicy"
                      Resource:
                          - "*"
            Roles:
                - Ref: "IotDeviceSimIdentityPoolAuthRole"
    
    # China Solution Builder team modify
    # Because CloudFormation for Cognito identity pool is not supported in China, use Lambda to attach role.
    # IotDeviceSimIdentityPoolRoleAttachment:
    #     Type: "AWS::Cognito::IdentityPoolRoleAttachment"
    #     Properties:
    #         IdentityPoolId: !GetAtt IotDeviceSimIAMCognitoIdentityPool.CognitoIdentityPoolID
    #         Roles:
    #             authenticated: !GetAtt IotDeviceSimIdentityPoolAuthRole.Arn
    
    # # SQS [start]

    IotDeviceSimQueue:
        Type: "AWS::SQS::Queue"
        Properties:
            KmsMasterKeyId: alias/aws/sqs
            QueueName: iot-device-simulation

    # SQS [end]

    # s3 [start]

    IotSimDataBucket:
        Type: AWS::S3::Bucket
        Properties:
            VersioningConfiguration:
                Status: Enabled
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                    - ServerSideEncryptionByDefault:
                          SSEAlgorithm: AES256
            PublicAccessBlockConfiguration:
                RestrictPublicBuckets: true
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
            LoggingConfiguration:
                DestinationBucketName: !Ref S3LoggingBucket
        DeletionPolicy: Retain
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    - id: W51
                      reason: "public access blocked, only allowed access through cloudfront"

    IotSimWebsiteBucket:
        Type: AWS::S3::Bucket
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    - id: W51
                      reason: "S3 bucket should likely have a bucket policy"
        DeletionPolicy: Retain
        Properties:
            VersioningConfiguration:
                Status: Enabled
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                    - ServerSideEncryptionByDefault:
                          SSEAlgorithm: AES256
            PublicAccessBlockConfiguration:
                # In order to use public static website
                RestrictPublicBuckets: false
                BlockPublicAcls: false
                BlockPublicPolicy: false
                IgnorePublicAcls: false
            LoggingConfiguration:
                DestinationBucketName: !Ref S3LoggingBucket
            WebsiteConfiguration:
                IndexDocument: "index.html"
                ErrorDocument: "index.html"

    S3LoggingBucket:
        DeletionPolicy: Retain
        Type: AWS::S3::Bucket
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    - id: W35
                      reason: "This S3 bucket is used as the destination for storing access logs'"
                    - id: W51
                      reason: "WebSiteBucket bucket policy not needed, public access blocked"
        Properties:
            BucketName: !Sub iot-sim-all-access-${AWS::AccountId}-${AWS::Region}
            AccessControl: LogDeliveryWrite
            VersioningConfiguration:
                Status: Enabled
            PublicAccessBlockConfiguration:
                RestrictPublicBuckets: true
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                    - ServerSideEncryptionByDefault:
                          SSEAlgorithm: AES256

    IotSimWebsiteBucketPolicy:
        Type: "AWS::S3::BucketPolicy"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    - id: F16
                      reason: "Need one S3 bucket that can be accessed publicly."

        Properties:
            Bucket:
                Ref: "IotSimWebsiteBucket"
            PolicyDocument:
                Statement:
                    - Action:
                          - "s3:GetObject"
                      Effect: "Allow"
                      Resource:
                          Fn::Join:
                              - ""
                              - - "arn:aws-cn:s3:::"
                                - Ref: "IotSimWebsiteBucket"
                                - "/*"
                      Principal: "*"
                        #[note]changed to *, just for testing.
                        #   CanonicalUser: !GetAtt IotSimWebsiteOriginAccessIdentity.S3CanonicalUserId

    # s3 [end]

    # cloudfront

    # IotSimWebsiteOriginAccessIdentity:
    #     Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    #     Properties:
    #         CloudFrontOriginAccessIdentityConfig:
    #             Comment: !Sub "access-identity-${IotSimWebsiteBucket}"

    # IotSimWebsiteDistribution:
    #     Type: AWS::CloudFront::Distribution
    #     Metadata:
    #         cfn_nag:
    #             rules_to_suppress:
    #                 - id: W10
    #                   reason: "This solution does not require CloudFront distribution access logging."
    #     Properties:
    #         DistributionConfig:
    #             Logging:
    #                 Bucket: !Sub ${S3LoggingBucket.DomainName}
    #                 Prefix: iot-device-sim-cf/
    #             Comment: "Website distribution for IoT Device Simulator console"
    #             Origins:
    #                 - Id: S3-iotsim-console
    #                   DomainName: !Sub "${IotSimWebsiteBucket}.s3.${AWS::Region}.amazonaws.com"
    #                   S3OriginConfig:
    #                       OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${IotSimWebsiteOriginAccessIdentity}"
    #             DefaultCacheBehavior:
    #                 TargetOriginId: S3-iotsim-console
    #                 AllowedMethods:
    #                     - GET
    #                     - HEAD
    #                     - OPTIONS
    #                     - PUT
    #                     - POST
    #                     - PATCH
    #                     - DELETE
    #                 CachedMethods:
    #                     - GET
    #                     - HEAD
    #                     - OPTIONS
    #                 ForwardedValues:
    #                     QueryString: "false"
    #                 ViewerProtocolPolicy: redirect-to-https
    #                 DefaultTTL: 0
    #                 MinTTL: 0
    #                 MaxTTL: 0
    #             DefaultRootObject: "index.html"
    #             CustomErrorResponses:
    #                 - ErrorCode: "404"
    #                   ResponsePagePath: "/index.html"
    #                   ResponseCode: "200"
    #                 - ErrorCode: "403"
    #                   ResponsePagePath: "/index.html"
    #                   ResponseCode: "200"
    #             # IPV6Enabled: "true"
    #             # ViewerCertificate:
    #             #     CloudFrontDefaultCertificate: "true"
    #             Enabled: "true"
    #             # HttpVersion: "http2"

    # cloudfront [end]

    # logs [start]

    IotDeviceSimEngineLogs:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: "/ecs/iot-simulation-engine-task"
            RetentionInDays: 30

    IotDeviceSimAPILogs:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: "/api/iot-simulation-access-logs/prod"
            RetentionInDays: 30

    # logs [end]

    # DynamoDB Tables [start]

    SettingsTable:
        Type: "AWS::DynamoDB::Table"
        DeletionPolicy: "Delete"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    - id: W28
                      reason: "naming reviewed"
        Properties:
            BillingMode: "PAY_PER_REQUEST"
            AttributeDefinitions:
                - AttributeName: "settingId"
                  AttributeType: "S"
            KeySchema:
                - AttributeName: "settingId"
                  KeyType: "HASH"
            SSESpecification:
                SSEEnabled: true
            TableName: "iot-sim-settings"

    MetricsTable:
        Type: "AWS::DynamoDB::Table"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    - id: W28
                      reason: "naming reviewed"
        DeletionPolicy: "Delete"
        Properties:
            BillingMode: "PAY_PER_REQUEST"
            AttributeDefinitions:
                - AttributeName: "userId"
                  AttributeType: "S"
            KeySchema:
                - AttributeName: "userId"
                  KeyType: "HASH"
            SSESpecification:
                SSEEnabled: true
            TableName: "iot-sim-metrics"

    DeviceTypesTable:
        Type: "AWS::DynamoDB::Table"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    - id: W28
                      reason: "naming reviewed"
        DeletionPolicy: "Delete"
        Properties:
            BillingMode: "PAY_PER_REQUEST"
            AttributeDefinitions:
                - AttributeName: "userId"
                  AttributeType: "S"
                - AttributeName: "typeId"
                  AttributeType: "S"
            KeySchema:
                - AttributeName: "userId"
                  KeyType: "HASH"
                - AttributeName: "typeId"
                  KeyType: "RANGE"
            SSESpecification:
                SSEEnabled: true
            TableName: "iot-sim-device-types"

    DeviceWidgetsTable:
        Type: "AWS::DynamoDB::Table"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    - id: W28
                      reason: "naming reviewed"
        DeletionPolicy: "Delete"
        Properties:
            BillingMode: "PAY_PER_REQUEST"
            AttributeDefinitions:
                - AttributeName: "userId"
                  AttributeType: "S"
                - AttributeName: "id"
                  AttributeType: "S"
                - AttributeName: "category"
                  AttributeType: "S"
            KeySchema:
                - AttributeName: "userId"
                  KeyType: "HASH"
                - AttributeName: "id"
                  KeyType: "RANGE"
            GlobalSecondaryIndexes:
                - IndexName: "userId-category-index"
                  KeySchema:
                      - AttributeName: "userId"
                        KeyType: "HASH"
                      - AttributeName: "category"
                        KeyType: "RANGE"
                  Projection:
                      ProjectionType: "ALL"
            SSESpecification:
                SSEEnabled: true
            TableName: "iot-sim-device-widgets"

    # DynamoDB Tables [end]

    # VPC [start]

    IotSimEngineVPC:
        Type: "AWS::EC2::VPC"
        Properties:
            CidrBlock: "10.0.0.0/16"
            EnableDnsSupport: true
            EnableDnsHostnames: true
            Tags:
                - Key: "Name"
                  Value: !Join ["-", [!Ref "AWS::StackName", "vpc"]]
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    - id: W60
                      reason: "Need not VPC flow log attached"

    # Public Subnets
    IotSimEnginePublicSubnet1A:
        Type: "AWS::EC2::Subnet"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    - id: W33
                      reason: "Public IP on launch is needed by the solution"
        Properties:
            MapPublicIpOnLaunch: true
            CidrBlock: "10.0.0.0/24"
            AvailabilityZone: !Select
                - 0
                - !GetAZs
            Tags:
                - Key: "Name"
                  Value: "iot-sim-public-subnet-1a"
            VpcId: !Ref IotSimEngineVPC

    IotSimEnginePublicSubnet1B:
        Type: "AWS::EC2::Subnet"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    - id: W33
                      reason: "Public IP on launch is needed by the solution"
        Properties:
            MapPublicIpOnLaunch: true
            CidrBlock: "10.0.1.0/24"
            AvailabilityZone: !Select
                - 1
                - !GetAZs
            Tags:
                - Key: "Name"
                  Value: "iot-sim-public-subnet-1b"
            VpcId: !Ref IotSimEngineVPC

    # Private Subnets
    IotSimEnginePrivateSubnet1A:
        Type: "AWS::EC2::Subnet"
        Properties:
            CidrBlock: "10.0.2.0/24"
            AvailabilityZone: !Select
                - 0
                - !GetAZs
            Tags:
                - Key: "Name"
                  Value: "iot-sim-private-subnet-1a"
            VpcId: !Ref IotSimEngineVPC

    IotSimEnginePrivateSubnet1B:
        Type: "AWS::EC2::Subnet"
        Properties:
            CidrBlock: "10.0.5.0/24"
            AvailabilityZone: !Select
                - 1
                - !GetAZs
            Tags:
                - Key: "Name"
                  Value: "iot-sim-private-subnet-1b"
            VpcId: !Ref IotSimEngineVPC

    IotSimEngineInternetGateway:
        Type: "AWS::EC2::InternetGateway"
        Properties:
            Tags:
                - Key: "Name"
                  Value: "iot-sim-internet-gateway"

    IotSimEngineGatewayAttachment:
        Type: "AWS::EC2::VPCGatewayAttachment"
        Properties:
            InternetGatewayId: !Ref IotSimEngineInternetGateway
            VpcId: !Ref IotSimEngineVPC

    # Route Tables
    IotSimEnginePublicSubnetRouteTable:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: !Ref IotSimEngineVPC
            Tags:
                - Key: "Name"
                  Value: "iot-sim-public-route-table"

    IotSimEnginePublicSubnetRoute:
        Type: "AWS::EC2::Route"
        Properties:
            DestinationCidrBlock: "0.0.0.0/0"
            GatewayId: !Ref IotSimEngineInternetGateway
            RouteTableId: !Ref IotSimEnginePublicSubnetRouteTable
        DependsOn: IotSimEngineGatewayAttachment

    IotSimEngineSubnet1ARouteAssociation:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            RouteTableId: !Ref IotSimEnginePublicSubnetRouteTable
            SubnetId: !Ref IotSimEnginePublicSubnet1A

    IotSimEngineSubnet1BRouteAssociation:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            RouteTableId: !Ref IotSimEnginePublicSubnetRouteTable
            SubnetId: !Ref IotSimEnginePublicSubnet1B

    IotSimEngineElasticIP1A:
        Type: "AWS::EC2::EIP"
        DependsOn: IotSimEngineInternetGateway
        Properties:
            Domain: vpc

    IotSimEngineNATGateway1A:
        Type: "AWS::EC2::NatGateway"
        DependsOn: IotSimEngineElasticIP1A
        Properties:
            AllocationId: !GetAtt IotSimEngineElasticIP1A.AllocationId
            SubnetId: !Ref IotSimEnginePublicSubnet1A

    IotSimEnginePrivateSubnetRouteTable1A:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: !Ref IotSimEngineVPC
            Tags:
                - Key: "Name"
                  Value: "iot-sim-private-route-table-1a"

    IotSimEnginePrivateSubnetRoute1A:
        Type: "AWS::EC2::Route"
        Properties:
            DestinationCidrBlock: "0.0.0.0/0"
            NatGatewayId: !Ref IotSimEngineNATGateway1A
            RouteTableId: !Ref IotSimEnginePrivateSubnetRouteTable1A
        DependsOn:
            - IotSimEngineNATGateway1A
            - IotSimEnginePrivateSubnetRouteTable1A

    IotSimEngineElasticIP1B:
        Type: "AWS::EC2::EIP"
        DependsOn: IotSimEngineInternetGateway
        Properties:
            Domain: vpc

    IotSimEngineNATGateway1B:
        Type: "AWS::EC2::NatGateway"
        DependsOn: IotSimEngineElasticIP1B
        Properties:
            AllocationId: !GetAtt IotSimEngineElasticIP1B.AllocationId
            SubnetId: !Ref IotSimEnginePublicSubnet1B

    IotSimEnginePrivateSubnetRouteTable1B:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: !Ref IotSimEngineVPC
            Tags:
                - Key: "Name"
                  Value: "iot-sim-private-route-table-1b"

    IotSimEnginePrivateSubnetRoute1B:
        Type: "AWS::EC2::Route"
        Properties:
            DestinationCidrBlock: "0.0.0.0/0"
            NatGatewayId: !Ref IotSimEngineNATGateway1B
            RouteTableId: !Ref IotSimEnginePrivateSubnetRouteTable1B
        DependsOn:
            - IotSimEngineNATGateway1B
            - IotSimEnginePrivateSubnetRouteTable1B

    IotSimEnginePrivSubnet1ARouteAssociation:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            RouteTableId: !Ref IotSimEnginePrivateSubnetRouteTable1A
            SubnetId: !Ref IotSimEnginePrivateSubnet1A

    IotSimEnginePrivSubnet1BRouteAssociation:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            RouteTableId: !Ref IotSimEnginePrivateSubnetRouteTable1B
            SubnetId: !Ref IotSimEnginePrivateSubnet1B

    # Security Group
    IotSimEngineIntraVPCSecurityGroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupName: "Intra-VPC Security Group"
            GroupDescription: "Security group that allows inbound from the VPC and outbound to the Internet"
            Tags:
                - Key: "Name"
                  Value: "iot-sim-intra-vpc-sg"
            VpcId: !Ref IotSimEngineVPC
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    - id: F1000
                      reason: "Missing egress rule is desired to specifically allow all traffic outbound"
                    - id: W28
                      reason: "naming reviewed"
                    - id: W27
                      reason: "Port range needed"
                    - id: W42
                      reason: "all protocols allowed"

    IotSimEngineIntraVPCSecurityGroupIngress:
        Type: "AWS::EC2::SecurityGroupIngress"
        Properties:
            FromPort: 0
            ToPort: 65535
            GroupId: !Ref IotSimEngineIntraVPCSecurityGroup
            Description: Iot Simulator Intra VPC Ingress Security Group
            IpProtocol: "-1"
            SourceSecurityGroupId: !Ref IotSimEngineIntraVPCSecurityGroup

    # VPC [end]

# Outputs

Outputs:
    ManagementConsole:
        Description: "Management Console URL"
        Value: !Sub
                - "http://${WebSiteBucketName}.s3-website.${AWS::Region}.amazonaws.com.cn"
                - { WebSiteBucketName: !Ref IotSimWebsiteBucket }
    NeedToUpdateAuthingCallBackURL:
        Description: "Need to Update Authing Call Back URL"
        Value: !Sub
                - "http://${WebSiteBucketName}.s3-website.${AWS::Region}.amazonaws.com.cn/home/login"
                - { WebSiteBucketName: !Ref IotSimWebsiteBucket } 

    IotDeviceSimApiEndpoint:
        Description: "Iot Device Simulator API Endpoint"
        Value:
            !Join [
                "",
                [
                    "https://",
                    Ref: IotDeviceSimApi,
                    ".execute-api.",
                    Ref: "AWS::Region",
                    ".amazonaws.com.cn/prod",
                ],
            ]

    SolutionUUID:
        Description: "Solution UUID"
        Value: !GetAtt IotDeviceSimAppUuid.UUID
    SettingsTable:
        Description: "Settings Table"
        Value: !Ref SettingsTable
    MetricsTable:
        Description: "Metrics table"
        Value: !Ref MetricsTable
    DeviceTypesTable:
        Description: "Device Types table"
        Value: !Ref DeviceTypesTable
    DeviceWidgetsTable:
        Description: "Device Widgets table"
        Value: !Ref DeviceWidgetsTable
    IotDeviceSimQueue:
        Description: "IoT Simulation Queue"
        Value: !Ref IotDeviceSimQueue
 
    # IotDeviceSimUserPool:
    #     Description: "Iot Device Simulator User Pool"
    #     Value: !GetAtt IotDeviceSimUserPool.Arn
    # IotDeviceSimUserPoolId:
    #     Description: "Iot Device Simulator User Pool ID"
    #     Value: !Ref IotDeviceSimUserPool
    # IotDeviceSimConsoleClientId:
    #     Description: "Iot Device Simulator Console Client"
    #     Value: !Ref IotDeviceSimConsoleClient
    # IotDeviceSimConsoleIdentityPool:
    #     Description: "Iot Device Simulator Identity Pool"
    #     Value: !Ref IotDeviceSimIdentityPool
